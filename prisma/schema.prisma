generator client {
  provider = "prisma-client-py"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id                   BigInt      @id @default(autoincrement())
  nombre               String?      @db.VarChar(250)
  apellidoPaterno      String?     @db.VarChar(250)
  apellidoMaterno      String?      @db.VarChar(250)
  correo               String?      @unique @db.VarChar(250)
  contrasena           String?      @db.VarChar(250)
  genero               String?      @db.VarChar(50)
  telefono             String?      @db.VarChar(50)
  pais                 String?      @db.VarChar(100)
  ciudad               String?      @db.VarChar(100)
  estado               Boolean?     @default(true)
  email_verified_at    DateTime?
  ultimoIntentoFallido DateTime?
  codeValidacion       String?     @db.VarChar(250)
  cantIntentos         Int         @default(0)
  imagen               String?     @db.VarChar(1500)
  roles                UsuarioRol[]
  eventosOrganizados   EventoAgendable[]
  comentarios          Comentario[]
  participaciones      ParticipanteEvento[]
  favoritos            Favorito[]
  estadisticas         Estadistica[]
  auditorias           Auditoria[]

}

model Rol {
  id          BigInt      @id @default(autoincrement())
  nombre_rol  String      @db.VarChar(100)
  descripcion String? 
  usuarios    UsuarioRol[]
  @@unique([nombre_rol])
}

model UsuarioRol {
  id_usuario BigInt
  id_rol     BigInt
  usuario    Usuario @relation(fields: [id_usuario], references: [id], onDelete: Cascade)
  rol        Rol     @relation(fields: [id_rol], references: [id], onDelete: Cascade)
  @@id([id_usuario, id_rol])
}

model Ubicacion {
  id               BigInt             @id @default(autoincrement())
  nombre           String             @db.VarChar(100)
  latitud          Float?
  longitud         Float?
  imagen           String?            @db.VarChar(1500)
  descripcion      String?            @db.VarChar(1500)
  historias        Historia[]
  culturas         Cultura[]
  eventos_historicos EventoHistorico[]
  eventos_agendables EventoAgendable[]
  @@index([nombre])
}

model EventoHistorico {
  id              BigInt                   @id @default(autoincrement())
  nombre          String                   @db.VarChar(255)
  descripcion     String                   @db.VarChar(1500)
  fecha_inicio    DateTime
  fecha_fin       DateTime?
  tipo            String                   @db.VarChar(100)
  ubicacion       Ubicacion?               @relation(fields: [id_ubicacion], references: [id])
  id_ubicacion    BigInt?
  bibliotecas     Biblioteca[] @relation("BibliotecasEventoHistorico")
  documentos      Biblioteca[] @relation("DocumentosEventoHistorico")
  multimedia      Multimedia[]
  categorias      CategoriaEventoHistorico[]
  comentarios     Comentario[]
  @@index([nombre])
  @@index([fecha_inicio])
}

model CategoriaEventoHistorico {
  id_evento    BigInt
  id_categoria BigInt
  evento       EventoHistorico @relation(fields: [id_evento], references: [id], onDelete: Cascade)
  categoria    Categoria       @relation(fields: [id_categoria], references: [id], onDelete: Cascade)
  @@id([id_evento, id_categoria])
}

model EventoAgendable {
  id              BigInt               @id @default(autoincrement())
  nombre          String               @db.VarChar(255)
  categoria       String?              @db.VarChar(100)
  estado          String?              @db.VarChar(100)
  descripcion     String               @db.VarChar(3500) 
  fecha_hora      DateTime
  ubicacion       Ubicacion?           @relation(fields: [id_ubicacion], references: [id])
  id_ubicacion    BigInt?
  organizador     Usuario              @relation(fields: [id_organizador], references: [id])
  id_organizador  BigInt
  participantes   ParticipanteEvento[]
  comentarios     Comentario[]
  imagen          String?              @db.VarChar(1500)
  @@index([nombre])
  @@index([fecha_hora])
}

model Categoria {
  id              BigInt     @id @default(autoincrement())
  nombre_categoria String     @db.VarChar(100)
  descripcion     String?     
  historias       Historia[]
  eventos         CategoriaEventoHistorico[]
  @@unique([nombre_categoria])
}

model Historia {
  id           BigInt      @id @default(autoincrement())
  titulo       String      @db.VarChar(255)
  descripcion  String      @db.VarChar(1500)
  fecha_inicio DateTime?
  fecha_fin    DateTime?
  imagen       String?     @db.VarChar(1500)
  ubicacion    Ubicacion?  @relation(fields: [id_ubicacion], references: [id])
  id_ubicacion BigInt?
  categoria    Categoria   @relation(fields: [id_categoria], references: [id])
  id_categoria BigInt
  @@index([titulo])
}

model Presidente {
  id               BigInt    @id @default(autoincrement())
  nombre           String    @db.VarChar(100)
  apellido         String    @db.VarChar(100)
  imagen           String?   @db.VarChar(1500)
  periodo_inicio   DateTime?
  periodo_fin      DateTime?
  biografia        String?   @db.VarChar(1500)
  partido_politico String?   @db.VarChar(100)
  politicas_clave  String?
  @@index([nombre, apellido])
}

model Cultura {
  id          BigInt      @id @default(autoincrement())
  nombre      String      @db.VarChar(100)
  imagen      String?     @db.VarChar(1500)
  descripcion String      @db.VarChar(2500)
  ubicacion   Ubicacion?  @relation(fields: [id_ubicacion], references: [id])
  id_ubicacion BigInt?
  multimedia      Multimedia[]
  @@index([nombre])
}

model ParticipanteEvento {
  id_usuario       BigInt
  id_evento        BigInt
  usuario          Usuario        @relation(fields: [id_usuario], references: [id], onDelete: Cascade)
  evento           EventoAgendable @relation(fields: [id_evento], references: [id], onDelete: Cascade)
  estado_asistencia BigInt       @default(0)
  @@id([id_usuario, id_evento])
  @@index([id_evento])
}



model Multimedia {
  id               BigInt           @id @default(autoincrement())
  url              String           @db.VarChar(500)
  tipo             String           @db.VarChar(50)
  evento_historico EventoHistorico? @relation(fields: [id_evento_historico], references: [id], onDelete: Cascade)
  id_evento_historico BigInt?
  cultura          Cultura?        @relation(fields: [id_cultura], references: [id], onDelete: Cascade)
  id_cultura       BigInt?
}

model TipoDocumento {
  id_tipo      Int         @id @default(autoincrement())
  tipo         String      @unique @db.VarChar(255)
  bibliotecas  Biblioteca[]
}

model Biblioteca {
  id                BigInt        @id @default(autoincrement())
  titulo            String        @db.VarChar(255)
  autor             String        @db.VarChar(255)
  imagen            String?       @db.VarChar(1500)
  fecha_publicacion DateTime?
  edicion           String?       @db.VarChar(100)
  tipo              TipoDocumento @relation(fields: [id_tipo], references: [id_tipo])
  id_tipo           Int
  fuente            String?       @db.VarChar(255)
  enlace            String?
  eventos_historicos EventoHistorico[] @relation("DocumentosEventoHistorico")
  bibliotecas       EventoHistorico[] @relation("BibliotecasEventoHistorico")
  comentarios       Comentario[]
  @@index([titulo])
  @@index([autor])
}

model Comentario {
  id           BigInt       @id @default(autoincrement())
  usuario      Usuario      @relation(fields: [id_usuario], references: [id], onDelete: Cascade)
  id_usuario   BigInt
  contenido    String       @db.VarChar(1500)
  fecha        DateTime     @default(now())
  biblioteca   Biblioteca?  @relation(fields: [id_biblioteca], references: [id], onDelete: Cascade)
  id_biblioteca BigInt?
  evento_agendable EventoAgendable? @relation(fields: [id_evento_agendable], references: [id], onDelete: Cascade)
  id_evento_agendable BigInt?
  evento_historico EventoHistorico? @relation(fields: [id_evento_historico], references: [id], onDelete: Cascade)
  id_evento_historico BigInt?
}

model Favorito {
  id              BigInt    @id @default(autoincrement())
  usuario         Usuario   @relation(fields: [id_usuario], references: [id], onDelete: Cascade)
  id_usuario      BigInt
  tipo_referencia String    @db.VarChar(50)
  id_referenciado BigInt
  @@index([tipo_referencia, id_referenciado])
  @@unique([id_usuario, tipo_referencia, id_referenciado])
}

model Auditoria {
  id         BigInt    @id @default(autoincrement())
  tipo       String    @db.VarChar(50)
  detalle    String?
  fecha      DateTime  @default(now())
  usuario    Usuario?  @relation(fields: [id_usuario], references: [id], onDelete: Cascade)
  id_usuario BigInt?
  @@index([tipo])
  @@index([fecha])
}

model Estadistica {
  id         BigInt         @id @default(autoincrement())
  tipo       EstadisticaTipo
  detalle    String?
  fecha      DateTime       @default(now())
  usuario    Usuario?       @relation(fields: [id_usuario], references: [id], onDelete: Cascade)
  id_usuario BigInt?
  @@index([tipo])
  @@index([fecha])
}

enum EstadisticaTipo {
  Visita
  Consulta
  Busqueda
}