// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-py"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model Usuario {
  id                   BigInt      @id @default(autoincrement())
  nombre               String      @db.VarChar(250)
  apellidoPaterno      String      @db.VarChar(250)
  apellidoMaterno      String      @db.VarChar(250)
  correo               String      @unique @db.VarChar(250)
  contrasena           String      @db.VarChar(250)
  genero               String      @db.VarChar(50)
  telefono             String      @db.VarChar(50)
  pais                 String      @db.VarChar(100)
  ciudad               String      @db.VarChar(100)
  estado               Boolean     @default(true)
  email_verified_at    DateTime?
  ultimoIntentoFallido DateTime?
  codeValidacion       String?     @db.VarChar(250)
  cantIntentos         Int?        @default(0)
  imagen               String?     @db.VarChar(500)
  roles                UsuarioRol[]
  eventosOrganizados   Evento[]
  comentarios          Comentario[]
  participaciones      ParticipanteEvento[]
  favoritos           Favorito[]
  estadisticas        Estadistica[]
}

model Rol {
  id          BigInt      @id @default(autoincrement())
  nombre_rol  String      @db.VarChar(100)
  descripcion String?
  usuarios    UsuarioRol[]
}


model UsuarioRol {
  id_usuario BigInt
  id_rol     BigInt
  usuario    Usuario @relation(fields: [id_usuario], references: [id])
  rol        Rol     @relation(fields: [id_rol], references: [id])

  @@id([id_usuario, id_rol])
}

model Ubicacion {
  id          BigInt      @id @default(autoincrement())
  nombre      String      @db.VarChar(100)
  latitud     Float?
  longitud    Float?
  imagen      String?     @db.VarChar(500)
  descripcion String?
  historias   Historia[]
  culturas    Cultura[]
  eventos     Evento[]
}

model Categoria {
  id              BigInt     @id @default(autoincrement())
  nombre_categoria String     @db.VarChar(100)
  descripcion     String?
  historias       Historia[]
}

model Historia {
  id           BigInt    @id @default(autoincrement())
  titulo       String    @db.VarChar(255)
  descripcion  String
  fecha_inicio DateTime?
  fecha_fin    DateTime?
  imagen       String?   @db.VarChar(500)
  ubicacion    Ubicacion? @relation(fields: [id_ubicacion], references: [id])
  id_ubicacion BigInt?
  categoria    Categoria @relation(fields: [id_categoria], references: [id])
  id_categoria BigInt
}

model Presidente {
  id               BigInt    @id @default(autoincrement())
  nombre           String    @db.VarChar(100)
  apellido         String    @db.VarChar(100)
  imagen           String?   @db.VarChar(500)
  periodo_inicio   DateTime?
  periodo_fin      DateTime?
  biografia       String?
  partido_politico String?   @db.VarChar(100)
  politicas_clave String?
}

model Cultura {
  id          BigInt    @id @default(autoincrement())
  nombre      String    @db.VarChar(100)
  imagen      String?   @db.VarChar(500)
  descripcion String
  ubicacion   Ubicacion? @relation(fields: [id_ubicacion], references: [id])
  id_ubicacion BigInt?
}

model Evento {
  id           BigInt    @id @default(autoincrement())
  nombre       String    @db.VarChar(255)
  descripcion  String
  fecha_hora   DateTime
  ubicacion    Ubicacion? @relation(fields: [id_ubicacion], references: [id])
  id_ubicacion BigInt?
  organizador  Usuario   @relation(fields: [id_organizador], references: [id])
  id_organizador BigInt
  imagen       String?   @db.VarChar(500)
  participantes ParticipanteEvento[]
  comentarios  Comentario[]
}

model ParticipanteEvento {
  id_usuario       BigInt
  id_evento        BigInt
  usuario          Usuario @relation(fields: [id_usuario], references: [id])
  evento           Evento  @relation(fields: [id_evento], references: [id])
  estado_asistencia Boolean @default(false)

  @@id([id_usuario, id_evento])
}

model TipoDocumento {
  id_tipo      Int        @id @default(autoincrement())
  tipo         String     @unique @db.VarChar(255)
  bibliotecas  Biblioteca[]
}

model Biblioteca {
  id                BigInt        @id @default(autoincrement())
  titulo            String        @db.VarChar(255)
  autor             String        @db.VarChar(255)
  imagen            String?       @db.VarChar(500)
  fecha_publicacion DateTime?
  edicion           String?       @db.VarChar(100)
  tipo              TipoDocumento @relation(fields: [id_tipo], references: [id_tipo])
  id_tipo           Int
  fuente            String?       @db.VarChar(255)
  enlace            String?
  comentarios       Comentario[]
}

model Comentario {
  id           BigInt     @id @default(autoincrement())
  usuario      Usuario    @relation(fields: [id_usuario], references: [id])
  id_usuario   BigInt
  contenido    String
  fecha        DateTime   @default(now())
  biblioteca   Biblioteca? @relation(fields: [id_biblioteca], references: [id])
  id_biblioteca BigInt?
  evento       Evento?     @relation(fields: [id_evento], references: [id])
  id_evento    BigInt?
}

model Favorito {
  id           BigInt   @id @default(autoincrement())
  usuario      Usuario  @relation(fields: [id_usuario], references: [id])
  id_usuario   BigInt
  id_referenciado BigInt
}

model Estadistica {
  id         BigInt   @id @default(autoincrement())
  tipo       EstadisticaTipo
  detalle    String?
  fecha      DateTime @default(now())
  usuario    Usuario? @relation(fields: [id_usuario], references: [id])
  id_usuario BigInt?
}

enum EstadisticaTipo {
  Visita
  Consulta
  Busqueda
}


